{
	"name": "easm",
	"scopeName": "source.easm",
	"patterns": [
		{
			"include": "#Comments"
		},
		{
			"include": "#CommentBlocks"
		},
		{
			"include": "#Pony"
		},
		{
			"include": "#String"	
		},
		{
			"include": "#ImportStat"
		},
		{
			"include": "#Function"
		},
		{
			"include": "#Structure"
		},
		{
			"include": "#Types"
		},
		{
			"include": "#Numbers"
		},
		{
			"include": "#NewOperator"
		},
		{
			"include": "#Keywords"
		},
		{
			"include": "#KeywordOperators"
		},
		{
			"include": "#Specials"
		},
		{
			"include": "#Label"
		},
		{
			"include": "#Condition"
		},
		{
			"include": "#Param"
		},
		{
			"include": "#Variable"
		}
	],
	"repository": {
		"Comments": {
			"match": "//.*",
			"name": "comment.easm"
		},
		"CommentBlocks": {
			"begin": "\\s*+(\\/\\*)",
			"end": "\\*\\/",
			"name": "comment.block.easm"
		},
		"Pony": {
			"match": "[pP][oO][nN][yY][!.,:]?",
			"name": "support.type.pony.easm"
		},
		"String": {
			"match": "(u8|u|U|L)?[\"']([^\\\n]|\\.|\\\n)*[\"']",
			"name": "string.easm"
		},
		"ImportStat": {
			"patterns": [{"include": "#ImportWord"}]
		},
		"ImportWord": {
			"match": "import (native)?",
			"name": "keyword.control.import.easm"
		},
		"Function": {
			"match": "func \\*?[a-zA-Z0-9_]+",
			"name": "storage.type.function.easm"
		},
		"Structure": {
			"match": "struct \\*?[a-zA-Z0-9_]+",
			"name": "entity.name.struct.easm"
		},
		"Types": {
			"match": "\\b(int|float|string|byte)\\b",
			"name": "entity.other.inherited-class.easm"
		},
		"Numbers": {
			"match": "\\b(null|true|false|[+-]?([0-9]+([eE][+-]?[0-9]+)?|([0-9]+)?\\.[0-9]+([eE][+-]?[0-9]+)?|[0-9]+\\.([eE][+-]?[0-9]+)?|[0-9]+|'0'[oO][0-7]+|'0'[xX][0-9a-fA-F]+|'0'[bB][0-1]+)\\b)",
			"name": "constant.easm"
		},
		"NewOperator": {
			"match": "new (local)?",
			"name": "keyword.control.expression.easm"
		},
		"Keywords": {
			"match": "\\b(pass|delete|jump|to|if|call (native)?|push|pull|inc|dec|ptr|bool|ssize|invoke|as|array|heap|return)\\b",
			"name": "keyword.control.expression.easm"
		},
		"KeywordOperators": {
			"match": "\\b(not|and|or|xor|nor|nand|xnor|add|sub|mul|div|rem|shr|shl)\\b",
			"name": "keyword.control.expression.easm"
		},
		"Specials": {
			"match": "->|\\[|\\]",
			"name": "keyword.control.expression.easm"
		},
		"Label": {
			"match": "[a-zA-Z_][a-zA-Z0-9_]*:",
			"name": "constant.easm"
		},
		"Condition": {
			"match": "=|!=|>|<|>=|<=",
			"name": "keyword.operator.easm"
		},
		"Param": {
			"match": "\\.\\w+",
			"name": "entity.name.param.easm"
		},
		"Variable": {
			"match": "\\*?\\w+",
			"name": "variable.easm"
		}
	}
}